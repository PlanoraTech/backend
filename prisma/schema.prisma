// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum InstitutionType {
    SCHOOL
    UNIVERSITY
    COLLEGE
    COMPANY
}

enum AccessType {
    PUBLIC
    PRIVATE
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum Roles {
    EMPLOYEE
    STUDENT
    PRESENTATOR
    PRINCIPAL
    EXECUTIVE
}

model Institutions {
    id           String          @id @default(uuid())
    name         String          @unique
    type         InstitutionType
    access       AccessType
    color        String
    website      String
    presentators Presentators[]
    subjects     Subjects[]
    rooms        Rooms[]
    timetables   TimeTables[]
    users        Users[]
}

model Presentators {
    id            String         @id @default(uuid())
    name          String         @unique
    appointments  Appointments[]
    institution   Institutions   @relation(fields: [institutionId], references: [id])
    institutionId String
    user          Users?
}

model Subjects {
    id            String         @id @default(uuid())
    name          String         @unique
    subjectId     String
    appointments  Appointments[]
    institution   Institutions   @relation(fields: [institutionId], references: [id])
    institutionId String
}

model Rooms {
    id            String         @id @default(uuid())
    name          String         @unique
    isAvailable   Boolean
    appointments  Appointments[]
    institution   Institutions   @relation(fields: [institutionId], references: [id])
    institutionId String
}

model TimeTables {
    id            String         @id @default(uuid())
    name          String         
    appointments  Appointments[]
    institution   Institutions   @relation(fields: [institutionId], references: [id])
    institutionId String
}

model Appointments {
    id           String         @id @default(uuid())
    subject      Subjects?      @relation(fields: [subjectId], references: [id])
    subjectId    String?
    presentators Presentators[]
    rooms        Rooms[]
    dayOfWeek    DayOfWeek
    start        DateTime
    end          DateTime
    isCancelled  Boolean
    timetables   TimeTables[]
}

model Users {
    id            String         @id @default(uuid())
    email         String         @unique
    password      String
    role          Roles
    institutions  Institutions[]
    presentator   Presentators?  @relation(fields: [presentatorId], references: [id])
    presentatorId String?        @unique
    tokens        Tokens[]
}

model Admins {
    id       String   @id @default(uuid())
    email    String   @unique
    password String
    Tokens   Tokens[]
}

model Tokens {
    id      String  @id @default(uuid())
    token   String
    user    Users?  @relation(fields: [userId], references: [id])
    userId  String?
    admin   Admins? @relation(fields: [adminId], references: [id])
    adminId String?
}
